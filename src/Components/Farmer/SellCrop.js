import React, { useState } from "react";
import { TextField, Select } from "@material-ui/core";
import Nav from "./Nav";
// import { abi } from "./Contract";
import Web3 from "web3";
import { Redirect } from "react-router-dom";
import axios from "axios";

export default function SellCrop() {
  var [harvestName, setHarvestName] = useState("");
  var [harvestDiscription, setHarvestDiscription] = useState();
  var [endingDate, setEndingDate] = useState("");
  var [endingTime, setEndingTime] = useState("");
  var [minAmount, setMinAmount] = useState();
  var [quanUnit, setQuanUnit] = useState("Kg");
  var [harvestQuantity, setHarvestQuantity] = useState();

  var [deployed, isDeployed] = useState(false);

  var MADDRESS = localStorage.getItem("meta");

  const deployContract = async () => {
    var eDate = endingDate.split("-");
    var eTime = endingTime.split(":");

    var lastDate = new Date(
      `${eDate[1]}/${eDate[2]}/${eDate[0]} ${eTime[0]}:${eTime[1] - 1}:59`
    ).getTime();
    var now = new Date().getTime();

    var name = harvestName;
    var StartTime = String(new Date());
    var qununit = quanUnit;
    var discription = harvestDiscription;
    var price = minAmount;
    var time = Math.floor((lastDate - now) / 1000);
    var quantity = harvestQuantity;
    const web3 = new Web3("http://127.0.0.1:7545");
    const abi = [
      {
        inputs: [
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "string",
            name: "harvest",
            type: "string",
          },
          {
            internalType: "string",
            name: "quantityUnit",
            type: "string",
          },
          {
            internalType: "string",
            name: "startTime",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "biddingTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "quantity",
            type: "uint256",
          },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "winner",
            type: "address",
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        name: "AuctionEnded",
        type: "event",
      },
      {
        inputs: [],
        name: "biddingAcceptAndEnd",
        outputs: [],
        stateMutability: "payable",
        type: "function",
      },
      {
        inputs: [],
        name: "FarmerCancelOffer",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
      },
      {
        inputs: [
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "string",
            name: "harvest",
            type: "string",
          },
          {
            internalType: "string",
            name: "quantityUnit",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "biddingTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "quantity",
            type: "uint256",
          },
        ],
        name: "FarmerModify",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
      },
      {
        inputs: [],
        name: "FarmerTerminate",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "bidder",
            type: "address",
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        name: "HighestBidIncreased",
        type: "event",
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "offerPrice",
            type: "uint256",
          },
        ],
        name: "TraderMakeOffer",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
      },
      {
        inputs: [
          {
            internalType: "address payable",
            name: "user",
            type: "address",
          },
        ],
        name: "TransferMoney",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
      },
      {
        inputs: [],
        name: "withdrawBid",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
      },
      {
        inputs: [],
        name: "AskingPrice",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "Checkbalance",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "Description",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "Farmer",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "GetCurrentOfferedPrice",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "GetTimeLeft",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "Harvest",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "highestBid",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "highestBidder",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "Quantity",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "QuantityUnit",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "StartTime",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "State",
        outputs: [
          {
            internalType: "enum easyMandi.StateType",
            name: "",
            type: "uint8",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "TotalBiddingTime",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
    ];
    const bytecode =
      "60806040523480156200001157600080fd5b50604051620023c4380380620023c48339818101604052810190620000379190620002b0565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260038190555086600190805190602001906200009692919062000177565b508142620000a5919062000420565b600481905550806005819055508560029080519060200190620000ca92919062000177565b506000600660006101000a81548160ff0219169083600381111562000118577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555084600990805190602001906200013592919062000177565b5083600890805190602001906200014e92919062000177565b506000600e60006101000a81548160ff02191690831515021790555050505050505050620005e1565b8280546200018590620004bd565b90600052602060002090601f016020900481019282620001a95760008555620001f5565b82601f10620001c457805160ff1916838001178555620001f5565b82800160010185558215620001f5579182015b82811115620001f4578251825591602001919060010190620001d7565b5b50905062000204919062000208565b5090565b5b808211156200022357600081600090555060010162000209565b5090565b60006200023e6200023884620003ea565b620003c1565b9050828152602081018484840111156200025757600080fd5b6200026484828562000487565b509392505050565b600082601f8301126200027e57600080fd5b81516200029084826020860162000227565b91505092915050565b600081519050620002aa81620005c7565b92915050565b600080600080600080600060e0888a031215620002cc57600080fd5b600088015167ffffffffffffffff811115620002e757600080fd5b620002f58a828b016200026c565b975050602088015167ffffffffffffffff8111156200031357600080fd5b620003218a828b016200026c565b965050604088015167ffffffffffffffff8111156200033f57600080fd5b6200034d8a828b016200026c565b955050606088015167ffffffffffffffff8111156200036b57600080fd5b620003798a828b016200026c565b94505060806200038c8a828b0162000299565b93505060a06200039f8a828b0162000299565b92505060c0620003b28a828b0162000299565b91505092959891949750929550565b6000620003cd620003e0565b9050620003db8282620004f3565b919050565b6000604051905090565b600067ffffffffffffffff82111562000408576200040762000587565b5b6200041382620005b6565b9050602081019050919050565b60006200042d826200047d565b91506200043a836200047d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000472576200047162000529565b5b828201905092915050565b6000819050919050565b60005b83811015620004a75780820151818401526020810190506200048a565b83811115620004b7576000848401525b50505050565b60006002820490506001821680620004d657607f821691505b60208210811415620004ed57620004ec62000558565b5b50919050565b620004fe82620005b6565b810181811067ffffffffffffffff8211171562000520576200051f62000587565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b620005d2816200047d565b8114620005de57600080fd5b50565b611dd380620005f16000396000f3fe60806040526004361061012a5760003560e01c80638191745f116100ab578063cfaa33001161006f578063cfaa330014610351578063d57bde791461037c578063ec69f29f146103a7578063f1b6dccd146103d2578063f21777c0146103fd578063fc4a4a1e146104285761012a565b80638191745f1461029057806391f90157146102bb578063a0a15311146102e6578063c3fb2440146102fd578063c5c95c55146103265761012a565b80634e543f9f116100f25780634e543f9f146101dc5780635efc1a64146102075780636a9aa996146102325780637312fdf11461025d5780637647fa74146102865761012a565b80630f8eab501461012f578063235147ca1461014657806327bf28031461016f57806337271cc71461019a5780633d64e17a146101b1575b600080fd5b34801561013b57600080fd5b50610144610453565b005b34801561015257600080fd5b5061016d600480360381019061016891906117e9565b610579565b005b34801561017b57600080fd5b506101846105c5565b6040516101919190611995565b60405180910390f35b3480156101a657600080fd5b506101af6105e9565b005b3480156101bd57600080fd5b506101c66109be565b6040516101d391906119f4565b60405180910390f35b3480156101e857600080fd5b506101f1610a4c565b6040516101fe9190611a36565b60405180910390f35b34801561021357600080fd5b5061021c610a52565b6040516102299190611a36565b60405180910390f35b34801561023e57600080fd5b50610247610a5a565b6040516102549190611a36565b60405180910390f35b34801561026957600080fd5b50610284600480360381019061027f9190611812565b610a60565b005b61028e610ca1565b005b34801561029c57600080fd5b506102a5610dee565b6040516102b291906119f4565b60405180910390f35b3480156102c757600080fd5b506102d0610e7c565b6040516102dd9190611995565b60405180910390f35b3480156102f257600080fd5b506102fb610ea2565b005b34801561030957600080fd5b50610324600480360381019061031f91906118e3565b611083565b005b34801561033257600080fd5b5061033b6114be565b60405161034891906119f4565b60405180910390f35b34801561035d57600080fd5b5061036661154c565b6040516103739190611a36565b60405180910390f35b34801561038857600080fd5b50610391611593565b60405161039e9190611a36565b60405180910390f35b3480156103b357600080fd5b506103bc611599565b6040516103c99190611a36565b60405180910390f35b3480156103de57600080fd5b506103e761159f565b6040516103f491906119d9565b60405180910390f35b34801561040957600080fd5b506104126115b2565b60405161041f9190611a36565b60405180910390f35b34801561043457600080fd5b5061043d611626565b60405161044a91906119f4565b60405180910390f35b600454421115610498576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048f90611a16565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156105015750600e60009054906101000a900460ff16155b1561050b57600080fd5b6003600660006101000a81548160ff02191690836003811115610557577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055506001600e60006101000a81548160ff021916908315150217905550565b8073ffffffffffffffffffffffffffffffffffffffff166108fc6007549081150290604051600060405180830381858888f193505050501580156105c1573d6000803e3d6000fd5b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045442111561062e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062590611a16565b60405180910390fd5b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111156109bb576000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156109ba576001600a60000180549050111561096e57600a6000016002600a600001805490506107869190611b19565b815481106107bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600c6000600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600781905550600a6000016001600a600001805490506108aa9190611b19565b815481106108e1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000600a60010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506109b9565b6000600660016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006007819055505b5b5b50565b600280546109cb90611c02565b80601f01602080910402602001604051908101604052809291908181526020018280546109f790611c02565b8015610a445780601f10610a1957610100808354040283529160200191610a44565b820191906000526020600020905b815481529060010190602001808311610a2757829003601f168201915b505050505081565b60055481565b600047905090565b60045481565b600454421115610aa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9c90611a16565b60405180910390fd5b60001515600e60009054906101000a900460ff16151514610ac557600080fd5b60026003811115610aff577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600660009054906101000a900460ff166003811115610b47577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b148015610bd25750600380811115610b88577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600660009054906101000a900460ff166003811115610bd0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b145b15610bdc57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c3457600080fd5b8560019080519060200190610c4a9291906116b4565b50826003819055508460029080519060200190610c689291906116b4565b508142610c759190611ac3565b600481905550806005819055508360099080519060200190610c989291906116b4565b50505050505050565b6007543414610caf57600080fd5b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d0957600080fd5b600e60009054906101000a900460ff1615610d2357600080fd5b6001600e60006101000a81548160ff0219169083151502179055506002600660006101000a81548160ff02191690836003811115610d8a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055507fdaec4582d5d9595688c8c98545fdd1c696d41c6aeaeb636737e84ed2f5c00eda600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600754604051610de49291906119b0565b60405180910390a1565b60018054610dfb90611c02565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2790611c02565b8015610e745780601f10610e4957610100808354040283529160200191610e74565b820191906000526020600020905b815481529060010190602001808311610e5757829003601f168201915b505050505081565b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600454421115610ee7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ede90611a16565b60405180910390fd5b60016003811115610f21577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600660009054906101000a900460ff166003811115610f69577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610f7357600080fd5b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610fcb57600080fd5b6000600660016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006007819055506000600660006101000a81548160ff02191690836003811115611061577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055506000600e60006101000a81548160ff021916908315150217905550565b6004544211156110c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110bf90611a16565b60405180910390fd5b60001515600e60009054906101000a900460ff161515146110e857600080fd5b6000811480156110fa57506003548111155b801561110857506007548111155b1561111257600080fd5b6002600381111561114c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600660009054906101000a900460ff166003811115611194577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14801561121f57506003808111156111d5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600660009054906101000a900460ff16600381111561121d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b145b1561122957600080fd5b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561128257600080fd5b6001600660006101000a81548160ff021916908360038111156112ce577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555033600660016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600781905550600754600c6000600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507ff4757a49b326036464bec6fe419a4ae38c8a02ce3e68bf0809674f6aab8ad30033826040516113b49291906119b0565b60405180910390a180600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600a60010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166114bb57600a600001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600980546114cb90611c02565b80601f01602080910402602001604051908101604052809291908181526020018280546114f790611c02565b80156115445780601f1061151957610100808354040283529160200191611544565b820191906000526020600020905b81548152906001019060200180831161152757829003601f168201915b505050505081565b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60075481565b60035481565b600660009054906101000a900460ff1681565b60006004544211156115f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f090611a16565b60405180910390fd5b600e60009054906101000a900460ff161561161357600080fd5b426004546116219190611b19565b905090565b6008805461163390611c02565b80601f016020809104026020016040519081016040528092919081815260200182805461165f90611c02565b80156116ac5780601f10611681576101008083540402835291602001916116ac565b820191906000526020600020905b81548152906001019060200180831161168f57829003601f168201915b505050505081565b8280546116c090611c02565b90600052602060002090601f0160209004810192826116e25760008555611729565b82601f106116fb57805160ff1916838001178555611729565b82800160010185558215611729579182015b8281111561172857825182559160200191906001019061170d565b5b509050611736919061173a565b5090565b5b8082111561175357600081600090555060010161173b565b5090565b600061176a61176584611a76565b611a51565b90508281526020810184848401111561178257600080fd5b61178d848285611bc0565b509392505050565b6000813590506117a481611d6f565b92915050565b600082601f8301126117bb57600080fd5b81356117cb848260208601611757565b91505092915050565b6000813590506117e381611d86565b92915050565b6000602082840312156117fb57600080fd5b600061180984828501611795565b91505092915050565b60008060008060008060c0878903121561182b57600080fd5b600087013567ffffffffffffffff81111561184557600080fd5b61185189828a016117aa565b965050602087013567ffffffffffffffff81111561186e57600080fd5b61187a89828a016117aa565b955050604087013567ffffffffffffffff81111561189757600080fd5b6118a389828a016117aa565b94505060606118b489828a016117d4565b93505060806118c589828a016117d4565b92505060a06118d689828a016117d4565b9150509295509295509295565b6000602082840312156118f557600080fd5b6000611903848285016117d4565b91505092915050565b61191581611b4d565b82525050565b61192481611bae565b82525050565b600061193582611aa7565b61193f8185611ab2565b935061194f818560208601611bcf565b61195881611d21565b840191505092915050565b6000611970601883611ab2565b915061197b82611d32565b602082019050919050565b61198f81611ba4565b82525050565b60006020820190506119aa600083018461190c565b92915050565b60006040820190506119c5600083018561190c565b6119d26020830184611986565b9392505050565b60006020820190506119ee600083018461191b565b92915050565b60006020820190508181036000830152611a0e818461192a565b905092915050565b60006020820190508181036000830152611a2f81611963565b9050919050565b6000602082019050611a4b6000830184611986565b92915050565b6000611a5b611a6c565b9050611a678282611c34565b919050565b6000604051905090565b600067ffffffffffffffff821115611a9157611a90611cf2565b5b611a9a82611d21565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000611ace82611ba4565b9150611ad983611ba4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611b0e57611b0d611c65565b5b828201905092915050565b6000611b2482611ba4565b9150611b2f83611ba4565b925082821015611b4257611b41611c65565b5b828203905092915050565b6000611b5882611b84565b9050919050565b6000611b6a82611b84565b9050919050565b6000819050611b7f82611d5b565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611bb982611b71565b9050919050565b82818337600083830152505050565b60005b83811015611bed578082015181840152602081019050611bd2565b83811115611bfc576000848401525b50505050565b60006002820490506001821680611c1a57607f821691505b60208210811415611c2e57611c2d611cc3565b5b50919050565b611c3d82611d21565b810181811067ffffffffffffffff82111715611c5c57611c5b611cf2565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f54696d6520466f722042696464696e67204973204f7665720000000000000000600082015250565b60048110611d6c57611d6b611c94565b5b50565b611d7881611b5f565b8114611d8357600080fd5b50565b611d8f81611ba4565b8114611d9a57600080fd5b5056fea264697066735822122034f0405cb1b92c298adc883809dcc42bf5369a19334cdd56e3cbffb628969d6264736f6c63430008010033";

    const result = await new web3.eth.Contract(abi)
      .deploy({
        data: bytecode,
        arguments: [
          discription,
          name,
          qununit,
          StartTime,
          price,
          time,
          quantity,
        ],
      })
      .send({
        from: MADDRESS,
        gas: "6721975",
        chainId: "0x1",
      });

    console.log("contract address " + result.options.address);

    await axios
      .post(
        "http://13.233.23.103/records/livebid/",
        {
          seller: localStorage.getItem("uid"),
          address: result.options.address,
          isTerminated: false,
        },
        {
          headers: {
            "Content-Type": "application/json",
          },
        }
      )
      .then((res) => {
        isDeployed(true);
        console.log(res);
      })
      .catch((err) => {
        console.log(err);
      });
  };

  return (
    <div className="formContainer">
      <Nav />
      <center>
        <h2 style={{ color: "rgb(2, 43, 2)" }}>
          Please enter all data carefully{" "}
        </h2>
      </center>
      <div className="form">
        <TextField
          variant="outlined"
          label="Harvest Name"
          onChange={(e) => {
            setHarvestName(e.target.value);
          }}
        />
        <div style={{ padding: 10 }} />
        <div>
          <TextField
            variant="outlined"
            label="Qunatity"
            type="number"
            onChange={(e) => {
              setHarvestQuantity(e.target.value);
            }}
          />
          <div style={{ padding: 10 }} />
          <Select
            native
            variant="outlined"
            onChange={(e) => {
              setQuanUnit(e.target.value);
            }}
          >
            <option value={"Kg"}>Kg</option>
            <option value={"Quintal"}>Quintal</option>
            <option value={"Ton"}>Ton</option>
          </Select>
        </div>
        <div style={{ padding: 10 }} />
        <TextField
          variant="outlined"
          label="Starting Bid (In Rupees)"
          type="number"
          onChange={(e) => {
            setMinAmount(e.target.value);
          }}
        />
        <div style={{ padding: 10 }} />
        <label style={{ opacity: 0.5, marginLeft: 5 }}>
          Ending Date & Time
        </label>
        <div>
          <TextField
            type="Date"
            variant="outlined"
            onChange={(e) => {
              setEndingDate(e.target.value);
            }}
          ></TextField>
          <div style={{ padding: 10 }} />

          <TextField
            type="Time"
            variant="outlined"
            onChange={(e) => {
              setEndingTime(e.target.value);
            }}
          ></TextField>
        </div>
        <div style={{ padding: 10 }} />
        <TextField
          variant="outlined"
          label="discription"
          onChange={(e) => setHarvestDiscription(e.target.value)}
        />
        <div style={{ padding: 10 }} />
        <center>
          <button
            onClick={deployContract}
            style={{
              backgroundColor: "#2F5233",
              color: "white",
              fontSize: "1.5em",
              width: "4em",
              marginTop: "2em",
            }}
          >
            Submit
          </button>
        </center>
      </div>
      {deployed && <Redirect to="/fhome" />}
    </div>
  );
}
