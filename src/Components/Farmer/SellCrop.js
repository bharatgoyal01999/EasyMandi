import React, { useState } from "react";
import { TextField, Select } from "@material-ui/core";
import Nav from "./Nav";
// import { abi } from "./Contract";
import Web3 from "web3";
import { Redirect } from "react-router-dom";
import axios from "axios";

export default function SellCrop() {
  var [harvestName, setHarvestName] = useState("");
  var [harvestDiscription, setHarvestDiscription] = useState();
  var [endingDate, setEndingDate] = useState("");
  var [endingTime, setEndingTime] = useState("");
  var [minAmount, setMinAmount] = useState();
  var [quanUnit, setQuanUnit] = useState("Kg");
  var [harvestQuantity, setHarvestQuantity] = useState();

  var [deployed, isDeployed] = useState(false);

  var MADDRESS = localStorage.getItem("meta");

  const deployContract = async () => {
    var eDate = endingDate.split("-");
    var eTime = endingTime.split(":");

    var lastDate = new Date(
      `${eDate[1]}/${eDate[2]}/${eDate[0]} ${eTime[0]}:${eTime[1] - 1}:59`
    ).getTime();
    var now = new Date().getTime();

    var name = harvestName;
    var StartTime = String(new Date());
    var qununit = quanUnit;
    var discription = harvestDiscription;
    var price = minAmount;
    var time = Math.floor((lastDate - now) / 1000);
    var quantity = harvestQuantity;
    const web3 = new Web3("http://127.0.0.1:7545");
    var abi = [
      {
        inputs: [
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "string",
            name: "harvest",
            type: "string",
          },
          {
            internalType: "string",
            name: "quantityUnit",
            type: "string",
          },
          {
            internalType: "string",
            name: "startTime",
            type: "string",
          },
          {
            internalType: "string",
            name: "fuid",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "biddingTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "quantity",
            type: "uint256",
          },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "winner",
            type: "address",
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        name: "AuctionEnded",
        type: "event",
      },
      {
        inputs: [],
        name: "biddingAcceptAndEnd",
        outputs: [],
        stateMutability: "payable",
        type: "function",
      },
      {
        inputs: [],
        name: "FarmerCancelOffer",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
      },
      {
        inputs: [
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "string",
            name: "harvest",
            type: "string",
          },
          {
            internalType: "string",
            name: "quantityUnit",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "biddingTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "quantity",
            type: "uint256",
          },
        ],
        name: "FarmerModify",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
      },
      {
        inputs: [],
        name: "FarmerTerminate",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "address",
            name: "bidder",
            type: "address",
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        name: "HighestBidIncreased",
        type: "event",
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "offerPrice",
            type: "uint256",
          },
        ],
        name: "TraderMakeOffer",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
      },
      {
        inputs: [
          {
            internalType: "address payable",
            name: "user",
            type: "address",
          },
        ],
        name: "TransferMoney",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
      },
      {
        inputs: [],
        name: "withdrawBid",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
      },
      {
        inputs: [],
        name: "AskingPrice",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "Checkbalance",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "Description",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "Farmer",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "Fuid",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "GetCurrentOfferedPrice",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "GetTimeLeft",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "Harvest",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "highestBid",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "highestBidder",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "Quantity",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "QuantityUnit",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "StartTime",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "State",
        outputs: [
          {
            internalType: "enum easyMandi.StateType",
            name: "",
            type: "uint8",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
      {
        inputs: [],
        name: "TotalBiddingTime",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
    ];
    const bytecode =
      "60806040523480156200001157600080fd5b50604051620024d1380380620024d18339818101604052810190620000379190620002ca565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260048190555087600290805190602001906200009692919062000191565b508360019080519060200190620000af92919062000191565b508142620000be919062000469565b600581905550806006819055508660039080519060200190620000e392919062000191565b506000600760006101000a81548160ff0219169083600381111562000131577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555085600a90805190602001906200014e92919062000191565b5084600990805190602001906200016792919062000191565b506000600f60006101000a81548160ff02191690831515021790555050505050505050506200062a565b8280546200019f9062000506565b90600052602060002090601f016020900481019282620001c357600085556200020f565b82601f10620001de57805160ff19168380011785556200020f565b828001600101855582156200020f579182015b828111156200020e578251825591602001919060010190620001f1565b5b5090506200021e919062000222565b5090565b5b808211156200023d57600081600090555060010162000223565b5090565b600062000258620002528462000433565b6200040a565b9050828152602081018484840111156200027157600080fd5b6200027e848285620004d0565b509392505050565b600082601f8301126200029857600080fd5b8151620002aa84826020860162000241565b91505092915050565b600081519050620002c48162000610565b92915050565b600080600080600080600080610100898b031215620002e857600080fd5b600089015167ffffffffffffffff8111156200030357600080fd5b620003118b828c0162000286565b985050602089015167ffffffffffffffff8111156200032f57600080fd5b6200033d8b828c0162000286565b975050604089015167ffffffffffffffff8111156200035b57600080fd5b620003698b828c0162000286565b965050606089015167ffffffffffffffff8111156200038757600080fd5b620003958b828c0162000286565b955050608089015167ffffffffffffffff811115620003b357600080fd5b620003c18b828c0162000286565b94505060a0620003d48b828c01620002b3565b93505060c0620003e78b828c01620002b3565b92505060e0620003fa8b828c01620002b3565b9150509295985092959890939650565b60006200041662000429565b90506200042482826200053c565b919050565b6000604051905090565b600067ffffffffffffffff821115620004515762000450620005d0565b5b6200045c82620005ff565b9050602081019050919050565b60006200047682620004c6565b91506200048383620004c6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620004bb57620004ba62000572565b5b828201905092915050565b6000819050919050565b60005b83811015620004f0578082015181840152602081019050620004d3565b8381111562000500576000848401525b50505050565b600060028204905060018216806200051f57607f821691505b60208210811415620005365762000535620005a1565b5b50919050565b6200054782620005ff565b810181811067ffffffffffffffff82111715620005695762000568620005d0565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6200061b81620004c6565b81146200062757600080fd5b50565b611e97806200063a6000396000f3fe6080604052600436106101355760003560e01c806391f90157116100ab578063cfaa33001161006f578063cfaa330014610387578063d57bde79146103b2578063ec69f29f146103dd578063f1b6dccd14610408578063f21777c014610433578063fc4a4a1e1461045e57610135565b806391f90157146102c6578063a0a15311146102f1578063c3fb244014610308578063c5c95c5514610331578063c826b0fd1461035c57610135565b80634e543f9f116100fd5780634e543f9f146101e75780635efc1a64146102125780636a9aa9961461023d5780637312fdf1146102685780637647fa74146102915780638191745f1461029b57610135565b80630f8eab501461013a578063235147ca1461015157806327bf28031461017a57806337271cc7146101a55780633d64e17a146101bc575b600080fd5b34801561014657600080fd5b5061014f610489565b005b34801561015d57600080fd5b50610178600480360381019061017391906118ad565b6105af565b005b34801561018657600080fd5b5061018f6105fb565b60405161019c9190611a59565b60405180910390f35b3480156101b157600080fd5b506101ba61061f565b005b3480156101c857600080fd5b506101d16109f4565b6040516101de9190611ab8565b60405180910390f35b3480156101f357600080fd5b506101fc610a82565b6040516102099190611afa565b60405180910390f35b34801561021e57600080fd5b50610227610a88565b6040516102349190611afa565b60405180910390f35b34801561024957600080fd5b50610252610a90565b60405161025f9190611afa565b60405180910390f35b34801561027457600080fd5b5061028f600480360381019061028a91906118d6565b610a96565b005b610299610cd7565b005b3480156102a757600080fd5b506102b0610e24565b6040516102bd9190611ab8565b60405180910390f35b3480156102d257600080fd5b506102db610eb2565b6040516102e89190611a59565b60405180910390f35b3480156102fd57600080fd5b50610306610ed8565b005b34801561031457600080fd5b5061032f600480360381019061032a91906119a7565b6110b9565b005b34801561033d57600080fd5b506103466114f4565b6040516103539190611ab8565b60405180910390f35b34801561036857600080fd5b50610371611582565b60405161037e9190611ab8565b60405180910390f35b34801561039357600080fd5b5061039c611610565b6040516103a99190611afa565b60405180910390f35b3480156103be57600080fd5b506103c7611657565b6040516103d49190611afa565b60405180910390f35b3480156103e957600080fd5b506103f261165d565b6040516103ff9190611afa565b60405180910390f35b34801561041457600080fd5b5061041d611663565b60405161042a9190611a9d565b60405180910390f35b34801561043f57600080fd5b50610448611676565b6040516104559190611afa565b60405180910390f35b34801561046a57600080fd5b506104736116ea565b6040516104809190611ab8565b60405180910390f35b6005544211156104ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c590611ada565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156105375750600f60009054906101000a900460ff16155b1561054157600080fd5b6003600760006101000a81548160ff0219169083600381111561058d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055506001600f60006101000a81548160ff021916908315150217905550565b8073ffffffffffffffffffffffffffffffffffffffff166108fc6008549081150290604051600060405180830381858888f193505050501580156105f7573d6000803e3d6000fd5b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600554421115610664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065b90611ada565b60405180910390fd5b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111156109f1576000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156109f0576001600b6000018054905011156109a457600b6000016002600b600001805490506107bc9190611bdd565b815481106107f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600d6000600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600881905550600b6000016001600b600001805490506108e09190611bdd565b81548110610917577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000600b60010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506109ef565b6000600760016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006008819055505b5b5b50565b60038054610a0190611cc6565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2d90611cc6565b8015610a7a5780601f10610a4f57610100808354040283529160200191610a7a565b820191906000526020600020905b815481529060010190602001808311610a5d57829003601f168201915b505050505081565b60065481565b600047905090565b60055481565b600554421115610adb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad290611ada565b60405180910390fd5b60001515600f60009054906101000a900460ff16151514610afb57600080fd5b60026003811115610b35577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600760009054906101000a900460ff166003811115610b7d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b148015610c085750600380811115610bbe577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600760009054906101000a900460ff166003811115610c06577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b145b15610c1257600080fd5b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c6a57600080fd5b8560029080519060200190610c80929190611778565b50826004819055508460039080519060200190610c9e929190611778565b508142610cab9190611b87565b6005819055508060068190555083600a9080519060200190610cce929190611778565b50505050505050565b6008543414610ce557600080fd5b600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d3f57600080fd5b600f60009054906101000a900460ff1615610d5957600080fd5b6001600f60006101000a81548160ff0219169083151502179055506002600760006101000a81548160ff02191690836003811115610dc0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055507fdaec4582d5d9595688c8c98545fdd1c696d41c6aeaeb636737e84ed2f5c00eda600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600854604051610e1a929190611a74565b60405180910390a1565b60028054610e3190611cc6565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5d90611cc6565b8015610eaa5780601f10610e7f57610100808354040283529160200191610eaa565b820191906000526020600020905b815481529060010190602001808311610e8d57829003601f168201915b505050505081565b600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600554421115610f1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1490611ada565b60405180910390fd5b60016003811115610f57577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600760009054906101000a900460ff166003811115610f9f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610fa957600080fd5b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461100157600080fd5b6000600760016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006008819055506000600760006101000a81548160ff02191690836003811115611097577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055506000600f60006101000a81548160ff021916908315150217905550565b6005544211156110fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f590611ada565b60405180910390fd5b60001515600f60009054906101000a900460ff1615151461111e57600080fd5b60008114801561113057506004548111155b801561113e57506008548111155b1561114857600080fd5b60026003811115611182577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600760009054906101000a900460ff1660038111156111ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b148015611255575060038081111561120b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600760009054906101000a900460ff166003811115611253577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b145b1561125f57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156112b857600080fd5b6001600760006101000a81548160ff02191690836003811115611304577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555033600760016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600881905550600854600d6000600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507ff4757a49b326036464bec6fe419a4ae38c8a02ce3e68bf0809674f6aab8ad30033826040516113ea929190611a74565b60405180910390a180600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b60010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166114f157600b600001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600a805461150190611cc6565b80601f016020809104026020016040519081016040528092919081815260200182805461152d90611cc6565b801561157a5780601f1061154f5761010080835404028352916020019161157a565b820191906000526020600020905b81548152906001019060200180831161155d57829003601f168201915b505050505081565b6001805461158f90611cc6565b80601f01602080910402602001604051908101604052809291908181526020018280546115bb90611cc6565b80156116085780601f106115dd57610100808354040283529160200191611608565b820191906000526020600020905b8154815290600101906020018083116115eb57829003601f168201915b505050505081565b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60085481565b60045481565b600760009054906101000a900460ff1681565b60006005544211156116bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b490611ada565b60405180910390fd5b600f60009054906101000a900460ff16156116d757600080fd5b426005546116e59190611bdd565b905090565b600980546116f790611cc6565b80601f016020809104026020016040519081016040528092919081815260200182805461172390611cc6565b80156117705780601f1061174557610100808354040283529160200191611770565b820191906000526020600020905b81548152906001019060200180831161175357829003601f168201915b505050505081565b82805461178490611cc6565b90600052602060002090601f0160209004810192826117a657600085556117ed565b82601f106117bf57805160ff19168380011785556117ed565b828001600101855582156117ed579182015b828111156117ec5782518255916020019190600101906117d1565b5b5090506117fa91906117fe565b5090565b5b808211156118175760008160009055506001016117ff565b5090565b600061182e61182984611b3a565b611b15565b90508281526020810184848401111561184657600080fd5b611851848285611c84565b509392505050565b60008135905061186881611e33565b92915050565b600082601f83011261187f57600080fd5b813561188f84826020860161181b565b91505092915050565b6000813590506118a781611e4a565b92915050565b6000602082840312156118bf57600080fd5b60006118cd84828501611859565b91505092915050565b60008060008060008060c087890312156118ef57600080fd5b600087013567ffffffffffffffff81111561190957600080fd5b61191589828a0161186e565b965050602087013567ffffffffffffffff81111561193257600080fd5b61193e89828a0161186e565b955050604087013567ffffffffffffffff81111561195b57600080fd5b61196789828a0161186e565b945050606061197889828a01611898565b935050608061198989828a01611898565b92505060a061199a89828a01611898565b9150509295509295509295565b6000602082840312156119b957600080fd5b60006119c784828501611898565b91505092915050565b6119d981611c11565b82525050565b6119e881611c72565b82525050565b60006119f982611b6b565b611a038185611b76565b9350611a13818560208601611c93565b611a1c81611de5565b840191505092915050565b6000611a34601883611b76565b9150611a3f82611df6565b602082019050919050565b611a5381611c68565b82525050565b6000602082019050611a6e60008301846119d0565b92915050565b6000604082019050611a8960008301856119d0565b611a966020830184611a4a565b9392505050565b6000602082019050611ab260008301846119df565b92915050565b60006020820190508181036000830152611ad281846119ee565b905092915050565b60006020820190508181036000830152611af381611a27565b9050919050565b6000602082019050611b0f6000830184611a4a565b92915050565b6000611b1f611b30565b9050611b2b8282611cf8565b919050565b6000604051905090565b600067ffffffffffffffff821115611b5557611b54611db6565b5b611b5e82611de5565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000611b9282611c68565b9150611b9d83611c68565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611bd257611bd1611d29565b5b828201905092915050565b6000611be882611c68565b9150611bf383611c68565b925082821015611c0657611c05611d29565b5b828203905092915050565b6000611c1c82611c48565b9050919050565b6000611c2e82611c48565b9050919050565b6000819050611c4382611e1f565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611c7d82611c35565b9050919050565b82818337600083830152505050565b60005b83811015611cb1578082015181840152602081019050611c96565b83811115611cc0576000848401525b50505050565b60006002820490506001821680611cde57607f821691505b60208210811415611cf257611cf1611d87565b5b50919050565b611d0182611de5565b810181811067ffffffffffffffff82111715611d2057611d1f611db6565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f54696d6520466f722042696464696e67204973204f7665720000000000000000600082015250565b60048110611e3057611e2f611d58565b5b50565b611e3c81611c23565b8114611e4757600080fd5b50565b611e5381611c68565b8114611e5e57600080fd5b5056fea2646970667358221220ca3183b09acab51309d4d938b409a3263886d0e253ba57ef1246ca6d2eec269164736f6c63430008010033";

    const result = await new web3.eth.Contract(abi)
      .deploy({
        data: bytecode,
        arguments: [
          discription,
          name,
          qununit,
          StartTime,
          localStorage.getItem("uid"),
          price,
          time,
          quantity,
        ],
      })
      .send({
        from: MADDRESS,
        gas: "6721975",
        chainId: "0x1",
      });

    console.log("contract address " + result.options.address);

    await axios
      .post(
        "http://13.233.23.103/records/livebid/",
        {
          seller: localStorage.getItem("uid"),
          address: result.options.address,
          isTerminated: false,
        },
        {
          headers: {
            "Content-Type": "application/json",
          },
        }
      )
      .then((res) => {
        isDeployed(true);
        console.log(res);
      })
      .catch((err) => {
        console.log(err);
      });
  };

  return (
    <div className="formContainer">
      <Nav />
      <center>
        <h2 style={{ color: "rgb(2, 43, 2)" }}>
          Please enter all data carefully{" "}
        </h2>
      </center>
      <div className="form">
        <TextField
          variant="outlined"
          label="Harvest Name"
          onChange={(e) => {
            setHarvestName(e.target.value);
          }}
        />
        <div style={{ padding: 10 }} />
        <div>
          <TextField
            variant="outlined"
            label="Qunatity"
            type="number"
            onChange={(e) => {
              setHarvestQuantity(e.target.value);
            }}
          />
          <div style={{ padding: 10 }} />
          <Select
            native
            variant="outlined"
            onChange={(e) => {
              setQuanUnit(e.target.value);
            }}
          >
            <option value={"Kg"}>Kg</option>
            <option value={"Quintal"}>Quintal</option>
            <option value={"Ton"}>Ton</option>
          </Select>
        </div>
        <div style={{ padding: 10 }} />
        <TextField
          variant="outlined"
          label="Starting Bid (In Rupees)"
          type="number"
          onChange={(e) => {
            setMinAmount(e.target.value);
          }}
        />
        <div style={{ padding: 10 }} />
        <label style={{ opacity: 0.5, marginLeft: 5 }}>
          Ending Date & Time
        </label>
        <div>
          <TextField
            type="Date"
            variant="outlined"
            onChange={(e) => {
              setEndingDate(e.target.value);
            }}
          ></TextField>
          <div style={{ padding: 10 }} />

          <TextField
            type="Time"
            variant="outlined"
            onChange={(e) => {
              setEndingTime(e.target.value);
            }}
          ></TextField>
        </div>
        <div style={{ padding: 10 }} />
        <TextField
          variant="outlined"
          label="discription"
          onChange={(e) => setHarvestDiscription(e.target.value)}
        />
        <div style={{ padding: 10 }} />
        <center>
          <button
            onClick={deployContract}
            style={{
              backgroundColor: "#2F5233",
              color: "white",
              fontSize: "1.5em",
              width: "4em",
              marginTop: "2em",
            }}
          >
            Submit
          </button>
        </center>
      </div>
      {deployed && <Redirect to="/fhome" />}
    </div>
  );
}
